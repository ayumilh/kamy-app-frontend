// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  password      String
  pushToken     String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relações
  groups        GroupMember[]
  tasks         Task[]        @relation("AssignedTasks")
  createdTasks  Task[]        @relation("CreatedTasks")
  notifications Notification[]
}

model Group {
  id          String    @id @default(uuid())
  name        String
  ownerId     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relações
  members     GroupMember[]
  tasks       Task[]
}

model GroupMember {
  id        String    @id @default(uuid())
  groupId   String
  userId    String
  createdAt DateTime  @default(now())

  // Relações
  group     Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([groupId, userId])
}

model Task {
  id          String    @id @default(uuid())
  title       String
  description String?
  groupId     String
  assignedTo  String
  createdBy   String
  dueDate     DateTime
  status      String    @default("pending")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relações
  group       Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  assignee    User      @relation("AssignedTasks", fields: [assignedTo], references: [id])
  creator     User      @relation("CreatedTasks", fields: [createdBy], references: [id])
}

model Notification {
  id        String    @id @default(uuid())
  userId    String
  title     String
  message   String
  type      String
  read      Boolean   @default(false)
  relatedId String?
  createdAt DateTime  @default(now())

  // Relações
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}
